        -:    0:Source:test.c
        -:    0:Graph:test.gcno
        -:    0:Data:test.gcda
        -:    0:Runs:1
        -:    1:#include "unity.h"
        -:    2:#include "header.h"
        -:    3:
        -:    4:/* Modify these two lines according to the project */
        -:    5:#define PROJECT_NAME "financialcalculator"
        -:    6:
        -:    7:/* Prototypes for all the test functions */
        -:    8:void test_gratuity(void);
        -:    9:void test_fixed_deposit(void);
        -:   10:void test_roi(void);
        -:   11:void test_emi(void);
        -:   12:
        -:   13:/* Required by the unity test framework */
        4:   14:void setUp(){}
        -:   15:/* Required by the unity test framework */
        4:   16:void tearDown(){}
        -:   17:
        -:   18:/* Start of the application test */
        1:   19:int main()
        -:   20:{
        -:   21:/* Initiate the Unity Test Framework */
        1:   22:  UNITY_BEGIN();
        1:   22-block  0
        -:   23:
        -:   24:/* Run Test functions */
        1:   25:  RUN_TEST(test_gratuity);
        1:   26:  RUN_TEST(test_fixed_deposit);
        1:   27:  RUN_TEST(test_roi);
        1:   28:  RUN_TEST(test_emi);
        -:   29:
        -:   30:  /* Close the Unity Test Framework */
        1:   31:  return UNITY_END();
        -:   32:}
        -:   33:
        -:   34:/* Write all the test functions */ 
        1:   35:void test_gratuity(void) {
        1:   36:  TEST_ASSERT_EQUAL(10384, gratuity_calculation(3000,5,5,1));
        1:   36-block  0
        1:   37:  TEST_ASSERT_EQUAL(103846, gratuity_calculation(30000,5,5,1));
        1:   38:  TEST_ASSERT_EQUAL(1038461, gratuity_calculation(300000,5,5,1));
        1:   39:  TEST_ASSERT_EQUAL(10384616, gratuity_calculation(3000000,5,5,1));
        1:   40:  TEST_ASSERT_EQUAL(0, gratuity_calculation(0,5,5,1));
        -:   41:  /* Dummy fail*/
        -:   42:  //TEST_ASSERT_EQUAL(15000, gratuity_calculation(30000,5,5,1));
        1:   43:}
        -:   44:
        1:   45:void test_fixed_deposit(void) {
        1:   46:  TEST_ASSERT_EQUAL(121306, fixed_deposit(100000,3,6.65));
        1:   46-block  0
        1:   47:  TEST_ASSERT_EQUAL(0, fixed_deposit(0,3,6.65));
        1:   48:  TEST_ASSERT_EQUAL(2593743, fixed_deposit(1000000,10,10));
        -:   49:  
        -:   50:  /* Dummy fail*/
        -:   51:  //TEST_ASSERT_EQUAL(100, fixed_deposit(100000,3,6.65));
        1:   52:}
        -:   53:
        1:   54:void test_roi(void) {
        1:   55:  TEST_ASSERT_EQUAL(0, roi(0,5,10));
        1:   55-block  0
        -:   56:  
        -:   57:  /* Dummy fail*/
        1:   58:  TEST_ASSERT_EQUAL(0, roi(0,5,10));
        1:   59:}
        -:   60:
        1:   61:void test_emi(void) {
        1:   62:  TEST_ASSERT_EQUAL(0, emi(0,5,10));
        1:   62-block  0
        -:   63:  
        -:   64:  /* Dummy fail*/
        1:   65:  TEST_ASSERT_EQUAL(0, emi(0,5,10));
        1:   66:}
        -:   67:
